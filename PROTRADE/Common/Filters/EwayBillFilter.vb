
Imports BL

Public Class EwayBillFilter

    Private Sub EwayBillFilter_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Me.KeyDown
        Try
            If e.KeyCode = Windows.Forms.Keys.Escape Or (e.KeyCode = Keys.X And e.Alt = True) Then
                Me.Close()
            ElseIf e.KeyCode = Keys.O And e.Alt = True Then
                CMDEXPORT_Click(sender, e)
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    'Private Sub cmbregister_Enter(ByVal sender As Object, ByVal e As System.EventArgs)
    '    Try
    '        If cmbregister.Text.Trim = "" Then fillregister(cmbregister, " and register_type = 'SALE'")

    '        Dim clscommon As New ClsCommon
    '        Dim dt As DataTable
    '        dt = clscommon.search(" register_name,register_id", "", " RegisterMaster ", " and register_default = 'True' and register_type = 'SALE' and register_cmpid = " & CmpId & " and register_locationid = " & Locationid & " and register_yearid = " & YearId)
    '        If dt.Rows.Count > 0 Then
    '            cmbregister.Text = dt.Rows(0).Item(0).ToString
    '        End If

    '    Catch ex As Exception
    '        Throw ex
    '    End Try
    'End Sub

    'Private Sub cmbregister_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
    '    Try
    '        If cmbregister.Text.Trim.Length > 0 Then
    '            cmbregister.Text = UCase(cmbregister.Text)
    '            Dim clscommon As New ClsCommon
    '            Dim SALEREGID As Integer
    '            Dim dt As DataTable
    '            dt = clscommon.search(" register_id ", "", " RegisterMaster ", " and register_name ='" & cmbregister.Text.Trim & "' and register_type = 'SALE' and register_cmpid = " & CmpId & " and register_locationid = " & Locationid & " and register_yearid = " & YearId)
    '            If dt.Rows.Count > 0 Then
    '                fillgrid()
    '            Else
    '                MsgBox("Register Not Present, Add New from Master Module")
    '                e.Cancel = True
    '            End If
    '        End If
    '    Catch ex As Exception
    '        Throw ex
    '    End Try
    'End Sub

    Sub fillgrid()
        Try
            Dim objclsCMST As New ClsCommonMaster
            'Dim dt As DataTable = objclsCMST.search("  'Outward' AS SUPPLYTYPE, 'Supply' AS SUBTYPE, 'Tax Invoice' AS DOCTYPE, INVOICEMASTER.INVOICE_INITIALS + '/' + RIGHT(CAST(YEAR(year_startdate)  AS VARCHAR(4)),2) + '-' + RIGHT(CAST(YEAR(year_enddate)  AS VARCHAR(4)),2)  AS DOCNO, INVOICEMASTER.INVOICE_DATE AS DOCDATE, CMPMASTER.cmp_displayedname AS FROMPARTY, CMPMASTER.CMP_GSTIN AS FROMGSTIN, ISNULL(CMPMASTER.cmp_add1, '') AS FROMADDRESS1, ISNULL(CMPMASTER.cmp_add2, '') AS FROMADDRESS2, ISNULL(CMPCITYMASTER.city_name, '') AS FROMPLACE, ISNULL(CMPMASTER.cmp_zipcode, '') AS FROMPINCODE, CMPSTATEMASTER.state_name AS FROMSTATE, LEDGERS.Acc_cmpname AS TOPARTY, LEDGERS.ACC_GSTIN AS TOGSTIN, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOLEDGERS.ACC_ADD,'') ELSE ISNULL(LEDGERS.Acc_add,'') END AS TOADDRESS1, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOLEDGERS.ACC_ADD,'') ELSE ISNULL(LEDGERS.Acc_add,'') END AS TOADDRESS2, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOCITY.CITY_NAME,'') ELSE ISNULL(CITYMASTER.city_name, '') END AS TOPLACE, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOLEDGERS.Acc_zipcode,'') ELSE ISNULL(LEDGERS.Acc_zipcode, '') END AS TOPINCODE,CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOSTATE.STATE_NAME,'') ELSE ISNULL(STATEMASTER.state_name,'') END AS TOSTATE, INVDESC.ITEMNAME , INVDESC.[ITEMDESCRIPTION], INVDESC.HSNCODE, INVDESC.UNIT, INVOICEMASTER.INVOICE_TOTALMTRS AS QTY, INVOICEMASTER.INVOICE_SUBTOTAL AS TAXABLEAMT, (CAST(INVOICE_CGSTPER AS VARCHAR(5))+'+' + CAST(INVOICE_SGSTPER AS VARCHAR(5)) + '+' + CAST(INVOICE_IGSTPER AS VARCHAR(5)) + '+0') AS TAXRATE, INVOICEMASTER.INVOICE_TOTALCGSTAMT AS CGSTAMT, INVOICEMASTER.INVOICE_TOTALSGSTAMT AS SGSTAMT, INVOICEMASTER.INVOICE_TOTALIGSTAMT AS IGSTAMT, 0 AS CESSAMT, 'Road' AS TRANSMODE, 0 AS DISTANCE, ISNULL(TRANSLEDGERS.Acc_cmpname, '') AS TRANSNAME, ISNULL(TRANSLEDGERS.ACC_GSTIN, '') AS TRANSID, ISNULL(INVOICEMASTER.INVOICE_LRNO, '') AS TRANSDOCNO, INVOICEMASTER.INVOICE_LRDATE AS TRANSDOCDATE, ISNULL(INVOICEMASTER.INVOICE_VEHICLENO, '') AS VEHICLENO", " ", " LEDGERS AS TRANSLEDGERS RIGHT OUTER JOIN CMPMASTER INNER JOIN STATEMASTER INNER JOIN INVOICEMASTER INNER JOIN LEDGERS ON INVOICEMASTER.INVOICE_LEDGERID = LEDGERS.Acc_id INNER JOIN REGISTERMASTER ON INVOICEMASTER.INVOICE_REGISTERID = REGISTERMASTER.register_id ON STATEMASTER.state_id = LEDGERS.Acc_stateid ON  CMPMASTER.cmp_id = INVOICEMASTER.INVOICE_CMPID INNER JOIN  YEARMASTER ON year_id = INVOICE_YEARID  INNER JOIN CITYMASTER AS CMPCITYMASTER ON CMPMASTER.cmp_cityid = CMPCITYMASTER.city_id INNER JOIN STATEMASTER AS CMPSTATEMASTER ON CMPMASTER.cmp_stateid = CMPSTATEMASTER.state_id LEFT OUTER JOIN LEDGERS AS SHIPTOLEDGERS ON SHIPTOLEDGERS.Acc_id = INVOICE_PACKINGID LEFT OUTER JOIN  STATEMASTER AS SHIPTOSTATE ON SHIPTOSTATE.state_id = SHIPTOLEDGERS.Acc_stateid  LEFT OUTER JOIN CITYMASTER AS SHIPTOCITY ON SHIPTOCITY.city_id = SHIPTOLEDGERS.Acc_cityid LEFT OUTER JOIN CITYMASTER ON LEDGERS.Acc_cityid = CITYMASTER.city_id ON TRANSLEDGERS.Acc_id = INVOICEMASTER.INVOICE_TRANSID CROSS APPLY (SELECT  TOP 1 ISNULL(ITEMMASTER.ITEM_NAME, '') AS ITEMNAME, ISNULL(HSN_ITEMDESC,'') as [ITEMDESCRIPTION], ISNULL(HSN_CODE,'') AS HSNCODE, ISNULL(UNIT_NAME, '') AS UNIT, INVOICE_MTRS AS QTY FROM INVOICEMASTER_DESC INNER JOIN ITEMMASTER ON item_id = INVOICE_ITEMID INNER JOIN  HSNMASTER ON ITEM_HSNCODEID = HSN_ID LEFT OUTER JOIN UNITMASTER ON item_unitid = unit_id  WHERE INVOICEMASTER_DESC.INVOICE_NO = INVOICEMASTER.INVOICE_NO AND INVOICEMASTER_DESC.INVOICE_REGISTERID = INVOICEMASTER.INVOICE_REGISTERID AND  INVOICEMASTER_DESC.INVOICE_YEARID = INVOICEMASTER.INVOICE_YEARID) AS INVDESC ", " AND INVOICE_GRANDTOTAL > 50000 AND INVOICE_EWAYBILLNO = '' AND CAST(STATEMASTER.STATE_REMARK AS VARCHAR(3)) <> '" & CMPSTATECODE & "' AND (INVOICEMASTER.INVOICE_YEARID = '" & YearId & "') ORDER BY INVOICEMASTER.INVOICE_REGISTERID, INVOICEMASTER.INVOICE_NO")

            Dim dt As DataTable
            If ClientName = "BARKHA" Or ClientName = "SHUBHI" Or ClientName = "DETLINE" Then
                dt = objclsCMST.search("  'Outward' AS SUPPLYTYPE, 'Supply' AS SUBTYPE, 'Tax Invoice' AS DOCTYPE, INVOICEMASTER.INVOICE_INITIALS + '/' + RIGHT(CAST(YEAR(year_startdate)  AS VARCHAR(4)),2) + '-' + RIGHT(CAST(YEAR(year_enddate)  AS VARCHAR(4)),2)  AS DOCNO, INVOICEMASTER.INVOICE_DATE AS DOCDATE, CMPMASTER.cmp_displayedname AS FROMPARTY, CMPMASTER.CMP_GSTIN AS FROMGSTIN, ISNULL(CMPMASTER.cmp_add1, '') AS FROMADDRESS1, ISNULL(CMPMASTER.cmp_add2, '') AS FROMADDRESS2, ISNULL(CMPCITYMASTER.city_name, '') AS FROMPLACE, ISNULL(CMPMASTER.cmp_zipcode, '') AS FROMPINCODE, CMPSTATEMASTER.state_name AS FROMSTATE, LEDGERS.Acc_cmpname AS TOPARTY, LEDGERS.ACC_GSTIN AS TOGSTIN, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOLEDGERS.ACC_ADD,'') ELSE ISNULL(LEDGERS.Acc_add,'') END AS TOADDRESS1, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOLEDGERS.ACC_ADD,'') ELSE ISNULL(LEDGERS.Acc_add,'') END AS TOADDRESS2, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOCITY.CITY_NAME,'') ELSE ISNULL(CITYMASTER.city_name, '') END AS TOPLACE, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOLEDGERS.Acc_zipcode,'') ELSE ISNULL(LEDGERS.Acc_zipcode, '') END AS TOPINCODE,CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOSTATE.STATE_NAME,'') ELSE ISNULL(STATEMASTER.state_name,'') END AS TOSTATE, INVDESC.ITEMNAME , INVDESC.[ITEMDESCRIPTION], INVDESC.HSNCODE, INVDESC.UNIT, INVOICEMASTER.INVOICE_TOTALMTRS AS QTY, INVOICEMASTER.INVOICE_SUBTOTAL AS TAXABLEAMT, (CAST(INVOICE_CGSTPER AS VARCHAR(5))+'+' + CAST(INVOICE_SGSTPER AS VARCHAR(5)) + '+' + CAST(INVOICE_IGSTPER AS VARCHAR(5)) + '+0') AS TAXRATE, INVOICEMASTER.INVOICE_TOTALCGSTAMT AS CGSTAMT, INVOICEMASTER.INVOICE_TOTALSGSTAMT AS SGSTAMT, INVOICEMASTER.INVOICE_TOTALIGSTAMT AS IGSTAMT, 0 AS CESSAMT, 'Road' AS TRANSMODE, 0 AS DISTANCE, ISNULL(TRANSLEDGERS.Acc_cmpname, '') AS TRANSNAME, ISNULL(TRANSLEDGERS.ACC_GSTIN, '') AS TRANSID, ISNULL(INVOICEMASTER.INVOICE_LRNO, '') AS TRANSDOCNO, INVOICEMASTER.INVOICE_LRDATE AS TRANSDOCDATE, ISNULL(INVOICEMASTER.INVOICE_VEHICLENO, '') AS VEHICLENO", " ", " LEDGERS AS TRANSLEDGERS RIGHT OUTER JOIN CMPMASTER INNER JOIN STATEMASTER INNER JOIN INVOICEMASTER INNER JOIN LEDGERS ON INVOICEMASTER.INVOICE_LEDGERID = LEDGERS.Acc_id INNER JOIN REGISTERMASTER ON INVOICEMASTER.INVOICE_REGISTERID = REGISTERMASTER.register_id ON STATEMASTER.state_id = LEDGERS.Acc_stateid ON  CMPMASTER.cmp_id = INVOICEMASTER.INVOICE_CMPID INNER JOIN  YEARMASTER ON year_id = INVOICE_YEARID  INNER JOIN CITYMASTER AS CMPCITYMASTER ON CMPMASTER.cmp_cityid = CMPCITYMASTER.city_id INNER JOIN STATEMASTER AS CMPSTATEMASTER ON CMPMASTER.cmp_stateid = CMPSTATEMASTER.state_id LEFT OUTER JOIN LEDGERS AS SHIPTOLEDGERS ON SHIPTOLEDGERS.Acc_id = INVOICE_PACKINGID LEFT OUTER JOIN  STATEMASTER AS SHIPTOSTATE ON SHIPTOSTATE.state_id = SHIPTOLEDGERS.Acc_stateid  LEFT OUTER JOIN CITYMASTER AS SHIPTOCITY ON SHIPTOCITY.city_id = SHIPTOLEDGERS.Acc_cityid LEFT OUTER JOIN CITYMASTER ON LEDGERS.Acc_cityid = CITYMASTER.city_id ON TRANSLEDGERS.Acc_id = INVOICEMASTER.INVOICE_TRANSID CROSS APPLY (SELECT  TOP 1 ISNULL(ITEMMASTER.ITEM_NAME, '') AS ITEMNAME, ISNULL(HSN_ITEMDESC,'') as [ITEMDESCRIPTION], ISNULL(HSN_CODE,'') AS HSNCODE, ISNULL(UNIT_NAME, '') AS UNIT, INVOICE_MTRS AS QTY FROM INVOICEMASTER_DESC INNER JOIN ITEMMASTER ON item_id = INVOICE_ITEMID INNER JOIN  HSNMASTER ON ITEM_HSNCODEID = HSN_ID LEFT OUTER JOIN UNITMASTER ON item_unitid = unit_id  WHERE INVOICEMASTER_DESC.INVOICE_NO = INVOICEMASTER.INVOICE_NO AND INVOICEMASTER_DESC.INVOICE_REGISTERID = INVOICEMASTER.INVOICE_REGISTERID AND  INVOICEMASTER_DESC.INVOICE_YEARID = INVOICEMASTER.INVOICE_YEARID) AS INVDESC ", " AND INVOICE_EWAYBILLNO = '' AND CAST(STATEMASTER.STATE_REMARK AS VARCHAR(3)) <> '" & CMPSTATECODE & "' AND (INVOICEMASTER.INVOICE_YEARID = '" & YearId & "') ORDER BY INVOICEMASTER.INVOICE_REGISTERID, INVOICEMASTER.INVOICE_NO")
            Else
                dt = objclsCMST.search("  'Outward' AS SUPPLYTYPE, 'Supply' AS SUBTYPE, 'Tax Invoice' AS DOCTYPE, INVOICEMASTER.INVOICE_INITIALS + '/' + RIGHT(CAST(YEAR(year_startdate)  AS VARCHAR(4)),2) + '-' + RIGHT(CAST(YEAR(year_enddate)  AS VARCHAR(4)),2)  AS DOCNO, INVOICEMASTER.INVOICE_DATE AS DOCDATE, CMPMASTER.cmp_displayedname AS FROMPARTY, CMPMASTER.CMP_GSTIN AS FROMGSTIN, ISNULL(CMPMASTER.cmp_add1, '') AS FROMADDRESS1, ISNULL(CMPMASTER.cmp_add2, '') AS FROMADDRESS2, ISNULL(CMPCITYMASTER.city_name, '') AS FROMPLACE, ISNULL(CMPMASTER.cmp_zipcode, '') AS FROMPINCODE, CMPSTATEMASTER.state_name AS FROMSTATE, LEDGERS.Acc_cmpname AS TOPARTY, LEDGERS.ACC_GSTIN AS TOGSTIN, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOLEDGERS.ACC_ADD,'') ELSE ISNULL(LEDGERS.Acc_add,'') END AS TOADDRESS1, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOLEDGERS.ACC_ADD,'') ELSE ISNULL(LEDGERS.Acc_add,'') END AS TOADDRESS2, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOCITY.CITY_NAME,'') ELSE ISNULL(CITYMASTER.city_name, '') END AS TOPLACE, CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOLEDGERS.Acc_zipcode,'') ELSE ISNULL(LEDGERS.Acc_zipcode, '') END AS TOPINCODE,CASE WHEN INVOICE_PACKINGID > 0 THEN ISNULL(SHIPTOSTATE.STATE_NAME,'') ELSE ISNULL(STATEMASTER.state_name,'') END AS TOSTATE, INVDESC.ITEMNAME , INVDESC.[ITEMDESCRIPTION], INVDESC.HSNCODE, INVDESC.UNIT, INVOICEMASTER.INVOICE_TOTALMTRS AS QTY, INVOICEMASTER.INVOICE_SUBTOTAL AS TAXABLEAMT, (CAST(INVOICE_CGSTPER AS VARCHAR(5))+'+' + CAST(INVOICE_SGSTPER AS VARCHAR(5)) + '+' + CAST(INVOICE_IGSTPER AS VARCHAR(5)) + '+0') AS TAXRATE, INVOICEMASTER.INVOICE_TOTALCGSTAMT AS CGSTAMT, INVOICEMASTER.INVOICE_TOTALSGSTAMT AS SGSTAMT, INVOICEMASTER.INVOICE_TOTALIGSTAMT AS IGSTAMT, 0 AS CESSAMT, 'Road' AS TRANSMODE, 0 AS DISTANCE, ISNULL(TRANSLEDGERS.Acc_cmpname, '') AS TRANSNAME, ISNULL(TRANSLEDGERS.ACC_GSTIN, '') AS TRANSID, ISNULL(INVOICEMASTER.INVOICE_LRNO, '') AS TRANSDOCNO, INVOICEMASTER.INVOICE_LRDATE AS TRANSDOCDATE, ISNULL(INVOICEMASTER.INVOICE_VEHICLENO, '') AS VEHICLENO", " ", " LEDGERS AS TRANSLEDGERS RIGHT OUTER JOIN CMPMASTER INNER JOIN STATEMASTER INNER JOIN INVOICEMASTER INNER JOIN LEDGERS ON INVOICEMASTER.INVOICE_LEDGERID = LEDGERS.Acc_id INNER JOIN REGISTERMASTER ON INVOICEMASTER.INVOICE_REGISTERID = REGISTERMASTER.register_id ON STATEMASTER.state_id = LEDGERS.Acc_stateid ON  CMPMASTER.cmp_id = INVOICEMASTER.INVOICE_CMPID INNER JOIN  YEARMASTER ON year_id = INVOICE_YEARID  INNER JOIN CITYMASTER AS CMPCITYMASTER ON CMPMASTER.cmp_cityid = CMPCITYMASTER.city_id INNER JOIN STATEMASTER AS CMPSTATEMASTER ON CMPMASTER.cmp_stateid = CMPSTATEMASTER.state_id LEFT OUTER JOIN LEDGERS AS SHIPTOLEDGERS ON SHIPTOLEDGERS.Acc_id = INVOICE_PACKINGID LEFT OUTER JOIN  STATEMASTER AS SHIPTOSTATE ON SHIPTOSTATE.state_id = SHIPTOLEDGERS.Acc_stateid  LEFT OUTER JOIN CITYMASTER AS SHIPTOCITY ON SHIPTOCITY.city_id = SHIPTOLEDGERS.Acc_cityid LEFT OUTER JOIN CITYMASTER ON LEDGERS.Acc_cityid = CITYMASTER.city_id ON TRANSLEDGERS.Acc_id = INVOICEMASTER.INVOICE_TRANSID CROSS APPLY (SELECT  TOP 1 ISNULL(ITEMMASTER.ITEM_NAME, '') AS ITEMNAME, ISNULL(HSN_ITEMDESC,'') as [ITEMDESCRIPTION], ISNULL(HSN_CODE,'') AS HSNCODE, ISNULL(UNIT_NAME, '') AS UNIT, INVOICE_MTRS AS QTY FROM INVOICEMASTER_DESC INNER JOIN ITEMMASTER ON item_id = INVOICE_ITEMID INNER JOIN  HSNMASTER ON ITEM_HSNCODEID = HSN_ID LEFT OUTER JOIN UNITMASTER ON item_unitid = unit_id  WHERE INVOICEMASTER_DESC.INVOICE_NO = INVOICEMASTER.INVOICE_NO AND INVOICEMASTER_DESC.INVOICE_REGISTERID = INVOICEMASTER.INVOICE_REGISTERID AND  INVOICEMASTER_DESC.INVOICE_YEARID = INVOICEMASTER.INVOICE_YEARID) AS INVDESC ", " AND INVOICE_GRANDTOTAL > 50000 AND INVOICE_EWAYBILLNO = '' AND CAST(STATEMASTER.STATE_REMARK AS VARCHAR(3)) <> '" & CMPSTATECODE & "' AND (INVOICEMASTER.INVOICE_YEARID = '" & YearId & "') ORDER BY INVOICEMASTER.INVOICE_REGISTERID, INVOICEMASTER.INVOICE_NO")
            End If
            gridbilldetails.DataSource = dt
            If dt.Rows.Count > 0 Then
                gridbill.FocusedRowHandle = gridbill.RowCount - 1
                gridbill.TopRowIndex = gridbill.RowCount - 15
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Private Sub CMDEXPORT_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CMDEXPORT.Click
        Try
            'TEMPORARILY COMMENTED BY GULKIT
            'GENERATE EXCEL FOR EWAYBILL
            'If MsgBox("Wish to Generate Excel for E-Way Bill?", MsgBoxStyle.YesNo) = MsgBoxResult.No Then Exit Sub
            'Dim OBJRPT As New clsReportDesigner("EWay Bill Tool", System.AppDomain.CurrentDomain.BaseDirectory & "EWay Bill Tool.xlsx", 2)
            'OBJRPT.EWAYBILL_EXCEL(CmpId, YearId, AccFrom, AccTo, cmbregister.Text.Trim)
            Dim PATH As String = Application.StartupPath & "\EWAY Bill Details.XLS"
            Dim opti As New DevExpress.XtraPrinting.XlsExportOptions
            opti.ShowGridLines = True
            opti.SheetName = "EWAY Bill Details"
            gridbill.ExportToXls(PATH, opti)
            EXCELCMPHEADER(PATH, "EWAY Bill Details", gridbill.VisibleColumns.Count + gridbill.GroupCount)
        Catch ex As Exception
            MsgBox("Eway Bill Details Excel File is Open, Please Close the File first then try to Export", MsgBoxStyle.Critical)
        End Try
    End Sub

    Private Sub EwayBillFilter_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Try
            fillgrid()
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Private Sub cmdexit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdexit.Click
        Me.Close()
    End Sub

    Private Sub CMDREFRESH_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CMDREFRESH.Click
        Try
            fillgrid()
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
End Class